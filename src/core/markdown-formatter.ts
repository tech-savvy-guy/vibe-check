import type { Vulnerability, VulnerabilityReport } from '../types';

export class MarkdownFormatter {
  toMarkdown(report: VulnerabilityReport): string {
    const lines: string[] = [];

    // Title
    lines.push('# Security Analysis Report');
    lines.push('Generated by Vibe-Check');
    lines.push('');

    // Summary
    lines.push('## Security Summary');
    lines.push(`- **Total issues**: ${report.summary.total}`);
    lines.push(`- **High severity**: ${report.summary.high}`);
    lines.push(`- **Medium severity**: ${report.summary.medium}`);
    lines.push(`- **Low severity**: ${report.summary.low}`);
    lines.push('');

    // Insights
    if (report.insights.length > 0) {
      lines.push('## Insights & Recommendations');
      for (const insight of report.insights) {
        lines.push(`- ${this.escapeMarkdown(insight)}`);
      }
      lines.push('');
    }

    // Findings
    lines.push('## Security Findings');
    if (report.vulnerabilities.length === 0) {
      lines.push('_No security vulnerabilities detected._');
    } else {
      report.vulnerabilities.forEach((vuln: Vulnerability, idx: number) => {
        lines.push(`
### Issue #${idx + 1} â€” ${vuln.severity.toUpperCase()}

- **Location**: \
  \
  
  
  
  
  
  
  
  
  
  
  
  
  
  \
  ${this.escapeMarkdown(vuln.file)}:${vuln.line}
- **Description**: ${this.escapeMarkdown(vuln.description)}
- **Recommendation**: ${this.escapeMarkdown(vuln.recommendation)}
`);
      });
    }

    // Footer
    lines.push('');
    lines.push('---');
    lines.push(`_Report generated on ${new Date().toLocaleString()}_`);

    return lines.join('\n');
  }

  private escapeMarkdown(text: string): string {
    return text
      .replace(/[\\`*_{}\[\]()#+\-.!|]/g, (m) => `\\${m}`);
  }
}


