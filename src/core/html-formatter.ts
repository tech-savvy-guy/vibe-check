import type { Vulnerability, VulnerabilityReport } from '../types';
import { FontEmbedder } from './font-embedder';

export class HtmlFormatter {
  /**
   * Format a security report as HTML for PDF generation
   */
  formatReportAsHtml(report: VulnerabilityReport, options?: { customFont?: string }): string {
    const html = `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vibe-Check Security Analysis Report</title>
    <style>
        ${this.getStyles(options?.customFont)}
    </style>
</head>
<body>
    <div class="container">
        ${this.generateHeader()}
        ${this.generateSummarySection(report.summary)}
        ${this.generateInsightsSection(report.insights)}
        ${this.generateVulnerabilitiesSection(report.vulnerabilities)}
        ${this.generateFooter()}
    </div>
</body>
</html>`;

    return html;
  }

  /**
   * Generate CSS styles for the PDF
   */
  private getStyles(customFont?: string): string {
    const fontFamily = FontEmbedder.getPrimaryFontStack(customFont);
    const monoFontFamily = FontEmbedder.getMonospaceFontStack();

    return `
        ${FontEmbedder.generateFontFaces()}

        * { box-sizing: border-box; }
        body {
            font-family: ${fontFamily};
            font-size: 14px;
            line-height: 1.6;
            color: #111;
            background: #fff;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 32px;
        }
        .header { margin-bottom: 24px; }
        .header h1 { font-size: 24px; margin: 0 0 6px; font-weight: 600; }
        .header .subtitle { color: #666; font-size: 14px; }
        .section { margin: 24px 0; }
        .section h2 { font-size: 16px; margin: 0 0 8px; font-weight: 600; }
        ul, ol { margin: 8px 0 0 20px; padding: 0; }
        li { margin: 4px 0; }
        .muted { color: #666; }
        .file-path { font-family: ${monoFontFamily}; font-size: 13px; color: #444; }
        .footer { margin-top: 32px; padding-top: 12px; border-top: 1px solid #eee; color: #666; font-size: 12px; text-align: center; }
        .timestamp { color: #999; }

        @media print {
            li { break-inside: avoid; page-break-inside: avoid; }
        }
    `;
  }

  /**
   * Generate header section
   */
  private generateHeader(): string {
    return `
        <div class="header">
            <h1>Security Analysis Report</h1>
            <div class="subtitle">Generated by Vibe-Check</div>
        </div>
    `;
  }

  /**
   * Generate summary section
   */
  private generateSummarySection(summary: { total: number; high: number; medium: number; low: number }): string {
    const riskLevel = this.getRiskLevel(summary);

    return `
        <div class="section">
            <h2>Security Summary</h2>
            <ul>
                <li><strong>Total issues:</strong> ${summary.total}</li>
                <li><strong>High severity:</strong> ${summary.high}</li>
                <li><strong>Medium severity:</strong> ${summary.medium}</li>
                <li><strong>Low severity:</strong> ${summary.low}</li>
                <li class="muted"><strong>Risk level:</strong> ${riskLevel}</li>
            </ul>
        </div>
    `;
  }

  /**
   * Generate insights section
   */
  private generateInsightsSection(insights: string[]): string {
    if (insights.length === 0) {
      return '';
    }

    const insightsList = insights.map(insight => `
        <li>${this.escapeHtml(insight)}</li>
    `).join('');

    return `
        <div class="section">
            <h2>Insights & Recommendations</h2>
            <ul>
                ${insightsList}
            </ul>
        </div>
    `;
  }

  /**
   * Generate vulnerabilities section
   */
  private generateVulnerabilitiesSection(vulnerabilities: Vulnerability[]): string {
    if (vulnerabilities.length === 0) {
      return `
            <div class="section">
                <h2>Security Findings</h2>
                <p class="muted">No security vulnerabilities detected in your codebase.</p>
            </div>
        `;
    }

    const items = vulnerabilities.map((vuln, index) => this.generateVulnerabilityItem(vuln, index + 1)).join('');

    return `
        <div class="section">
            <h2>Security Findings</h2>
            <ol>
                ${items}
            </ol>
        </div>
    `;
  }

  /**
   * Generate individual vulnerability card
   */
  private generateVulnerabilityItem(vuln: Vulnerability, index: number): string {
    return `
        <li>
            <strong>Issue #${index}</strong> â€” <span class="muted">${vuln.severity.toUpperCase()}</span>
            <div><strong>Location:</strong> <span class="file-path">${this.escapeHtml(vuln.file)}:${vuln.line}</span></div>
            <div><strong>Description:</strong> ${this.escapeHtml(vuln.description)}</div>
            <div><strong>Recommendation:</strong> ${this.escapeHtml(vuln.recommendation)}</div>
        </li>
    `;
  }

  /**
   * Generate footer section
   */
  private generateFooter(): string {
    const timestamp = new Date().toLocaleString();
    
    return `
        <div class="footer">
            <div>Generated by Vibe-Check - AI-Powered Security Scanner</div>
            <div class="timestamp">Report generated on ${timestamp}</div>
        </div>
    `;
  }

  /**
   * Get risk level description
   */
  private getRiskLevel(summary: { high: number; medium: number; low: number }): string {
    if (summary.high > 0) {
      return 'HIGH - Immediate attention required!';
    } else if (summary.medium > 2) {
      return 'MEDIUM - Review recommended';
    } else if (summary.medium > 0 || summary.low > 0) {
      return 'LOW - Monitor and improve';
    } else {
      return 'EXCELLENT - No issues found!';
    }
  }

  /**
   * Escape HTML characters
   */
  private escapeHtml(text: string): string {
    const div = { innerHTML: '' } as any;
    div.textContent = text;
    return div.innerHTML || text
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#39;');
  }
}
